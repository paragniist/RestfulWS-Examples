#5. 
web.xml
--------
<servlet>
	<servlet-name>jakarta.ws.rs.core.Application</servlet-name>
</servlet>
<servlet-mapping>
	<servlet-name>jakarta.ws.rs.core.Application</servlet-name>
	<url-pattern>/api/*</url-pattern>
</servlet-mapping>


#6. using annotation approach
1. no web.xml, supported only in servlet 3.0 servlet containers only
2. it works agnostic to the implementation vendors


@ApplicationPath("/api)
class MyApplication extends Application {
	/** return object of the resource classes you want them to be registered as singleton with jaxrs container **/
	public Set<Object> getSingletons() {}
	/** return class reference of the resource classes whom you wanted to register as request-per-object model **/
	public Set<Class<?>> getClasses() {}
}

#7. using web.xml and configure our Application class itself as Servlet

class MyApplication extends Application {
	/** return object of the resource classes you want them to be registered as singleton with jaxrs container **/
	public Set<Object> getSingletons() {}
	/** return class reference of the resource classes whom you wanted to register as request-per-object model **/
	public Set<Class<?>> getClasses() {}
}

web.xml
<servlet>
	<servlet-name>MyApplication</servlet-name>
</servlet>
<servlet-mapping>
	<servlet-name>MyApplication</servlet-name>
	<url-pattern>/api/*</url-pattern>
</servlet-mapping>

#8. 

class ResourceConfig extends jakarta.ws.rs.core.Application {
	private Set<Object> singletons;
	private Set<Class<?>> classes;
	
	public ResourceConfig() {
		singletons = new HashSet();
		classes = new HashSet();
	}
	
	public Set<Object> getSingletons() {return singletons;}
	public Set<Class<?>> getClasses() {return classes;}
	
	public void register(Object obj) {singletons.add(obj);}
	public void register(Class<?> clazz) {classes.add(clazz);}
}

class MyApplication extends ResourceConfig {
	public MyApplication() {
		super.register(new PayTMApplication());
		super.register(AccountService.class);
	}
}

web.xml
<servlet>
	<servlet-name>jersey</servlet-name>
	<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
	<load-on-startup>1</load-on-startup>
	<init-param>
		<param-name>jakarta.ws.rs.Application</param-name>
		<param-value>MyApplication</param-value>
	</init-param>
</servlet>














